var WIDTH = 800;
var HEIGHT = 800;

var canvas = document.createElement("canvas");
var ctx = canvas.getContext("2d");
canvas.width = WIDTH;
canvas.height = HEIGHT;




// var AM = new AssetManager();
// var HERO = "images/Arrow-1.png";
// var BACK = "images/background.png";

// AM.queueDownload(HERO);







// Handle keyboard controls
var keysDown = {};
var key_names = {
	87:"up",
	83:"down",
	65:"left",
	68:"right"
}

//TO DO:
//Update to use key_names
function input_change(key, value){
	if (key in key_names){
		keysDown[key_names[key]] = value;
	}
}


addEventListener("keydown", function (e) {
	if (!keysDown[key_names[e.keyCode]]){
		input_change(e.keyCode, true);
	}
}, false);

addEventListener("keyup", function (e) {
	input_change(e.keyCode, false);
}, false);


addEventListener("mousedown", function (e) {
    var isRightMB;
    e = e || window.event;

    if ("which" in e)  // Gecko (Firefox), WebKit (Safari/Chrome) & Opera
        isRightMB = e.which == 3; 
    else if ("button" in e)  // IE, Opera 
        isRightMB = e.button == 2; 
        	
	if (!isRightMB){	
		selectRect.start(e.pageX, e.pageY);
		e.preventDefault();
	}
	else{
		e.preventDefault();
	}
}, false);

addEventListener("mouseup", function (e) {
    var isRightMB;
    e = e || window.event;

    if ("which" in e)  // Gecko (Firefox), WebKit (Safari/Chrome) & Opera
        isRightMB = e.which == 3; 
    else if ("button" in e)  // IE, Opera 
        isRightMB = e.button == 2; 
        
    if (!isRightMB){

		if(selectRect.end(e.pageX, e.pageY)){
			return;
		}
    	var pos = {x: e.clientX + cameraOffset.x, y: e.clientY + cameraOffset.y};
		for(var i = 0; i < ents.length; i++){
			var ent = ents[i];
			if(ent.x-ent.width/2 < pos.x && ent.x+ent.width/2 > pos.x &&
			   ent.y-(ent.height || ent.width)/2 < pos.y && ent.y+(ent.height || ent.width)/2 > pos.y){
				if(ent.onClick){
					ent.onClick();
				}
			}
		}
	}
	else{
		e.preventDefault();
		for(var i = 0; i < selectRect.selected.length; i++){
			var ent = selectRect.selected[i];
			ent.moveTo(e.pageX, e.pageY);
		}

	}

}, false);


addEventListener("mousemove", function (e) {
    var isRightMB;
    e = e || window.event;

    if ("which" in e)  // Gecko (Firefox), WebKit (Safari/Chrome) & Opera
        isRightMB = e.which == 3; 
    else if ("button" in e)  // IE, Opera 
        isRightMB = e.button == 2; 
        	
	if (!isRightMB){	

		selectRect.move(e.pageX, e.pageY);
		return false;
	}

}, false);


canvas.oncontextmenu = function () {
   return false;
}




function SelectRect(){
	this.startX = 0;
	this.startY = 0;
	this.x = 0;
	this.y = 0;
	this.active = false;
	this.started = false;
	this.minActiveDist = 10;

	this.selected = [];
}
SelectRect.prototype.draw = function(ctx){
	var startX = this.startX - cameraOffset.x;
	var startY = this.startY - cameraOffset.y;
	if(this.active){
		ctx.strokeRect(Math.min(this.x, startX), Math.min(this.y, startY), Math.max(this.x, startX) - Math.min(this.x, startX), Math.max(this.y, startY) - Math.min(this.y, startY))
	}
}

SelectRect.prototype.start = function(x, y){
	this.x = x;
	this.y = y;
	this.startX = x + cameraOffset.x;
	this.startY = y + cameraOffset.y;
	this.started = true;
	this.active = false;
	this.selected = [];
}

SelectRect.prototype.end = function(x,y){
	this.move(x,y);
	var ret = false;
	if(this.started && this.active){
		ret = true;
	}
	this.started = false;
	this.active = false;

	for(var i = 0; i < ents.length; i++){
		var ent = ents[i];

		if(ent.x > Math.min(this.startX, this.x + cameraOffset.x) && ent.x < Math.max(this.startX, this.x + cameraOffset.x) && ent.y > Math.min(this.startY, this.y + cameraOffset.y) && ent.y < Math.max(this.startY, this.y + cameraOffset.y) ){
			if(ent.isShip){
				this.selected.push(ent);
			}
		}
		else if(!ret && ent.x-ent.width/2 < x && ent.x+ent.width/2 > x &&
			   ent.y-(ent.height || ent.width)/2 < y && ent.y+(ent.height || ent.width)/2 > y){
			if(ent.isShip){
				ret = true;
				this.selected.push(ent);
			}
		}
	}
	return ret;
}

SelectRect.prototype.getStartXOffset = function(){
	return this.startX - cameraOffset.x;
}
SelectRect.prototype.getStartYOffset = function(){
	return this.startY - cameraOffset.y
}



SelectRect.prototype.move = function(x, y){
	if(this.started){
		this.x = x;
		this.y = y;
	}
	if(this.started && Dist(this.x, this.y, this.getStartXOffset(), this.getStartYOffset()) > this.minActiveDist){
		this.active = true;
	}
}



var selectRect = new SelectRect();

function CreateShip(){

}

var cameraOffset = {x: 0, y: 0};


var selected = null;


Base.prototype.isBase = true;

function Base(x, y){
	this.x = x;
	this.y = y;
	this.width = 75;
	this.height = 75;
	this.renderType = "Rectangle";
	this.color = {r: 255, g: 0, b:0};

	this.arc = {
		x : this.x,
		y : this.y,
		width : this.width * 2,
		lineWidth : this.width * .1,
		renderType : "CircleOutline",
		color : Clone(this.color)
	};
	this.arc.color.a = .5;
}


Base.prototype.draw = function(ctx){
	RenderObject(this, ctx);
	if(this.selected()){
		RenderObject(this.arc);
	}
}

Base.prototype.selected = function(){
	return selected===this;
}

Base.prototype.update = function(delta){

}

Base.prototype.onClick = function(){
	if(selected !== this){
		if(selected){
			selected.onUnSelect();
		}
		this.onSelect();
		selected = this;
	}
}

Base.prototype.onSelect = function(){
}

Base.prototype.onUnSelect = function(){
}

Base.prototype.issueCommand = function(command){
	
}



/*Abstract parent class of all ship states. Defines the default state behavior.*/
function ShipAIState(ship){
	this.ship = ship;
}

ShipAIState.prototype.onMoveToBaseOrder = function(base){
	this.ship.state = new ShipMoveToBaseState(this.ship, base);
}

ShipAIState.prototype.onMoveToPointOrder = function(point){
	this.ship.state = new ShipMoveToPointState(this.ship, point);
}

ShipAIState.prototype.update = function(delta){

}




ShipIdleState.prototype = new ShipAIState();
ShipIdleState.prototype.constructor = ShipIdleState;

function ShipIdleState(ship){
	ShipAIState.call(this, ship);

	this.ship = ship;

	this.radius = 20;

	this.centerx = ship.x - this.radius * Math.cos(this.theta);
	this.centery = ship.y - this.radius * Math.sin(this.theta);
	this.orbitManager = new MoveInCirclesManager(this.ship, {x: this.centerx, y: this.centery}, this.ship.speed);
}

ShipIdleState.prototype.update = function(delta){
	this.orbitManager.update(delta);
}


ShipMoveToBaseState.prototype = new ShipAIState();
ShipMoveToBaseState.prototype.constructor = ShipMoveToBaseState;

function ShipMoveToBaseState(ship, base){
	ShipAIState.call(this, ship);

	this.ship = ship;
	this.targetBase = base;
	this.moveManager = new MoveToPointManager(ship, base);
}

ShipMoveToBaseState.prototype.update = function(delta){
	this.moveManager.update(delta);
	this.checkForArrival();
}

ShipMoveToBaseState.prototype.checkForArrival = function(){
	if(this.moveManager.hasArrived()){
		this.ship.state = new ShipOrbitBaseState(this.ship, this.base);
	}






ShipMoveToPointState.prototype = new ShipAIState();
ShipMoveToPointState.prototype.constructor = ShipMoveToPointState;

function ShipMoveToPointState(ship, point){
	ShipAIState.call(this, ship);

	this.ship = ship;
	this.target = point;
	this.moveManager = new MoveToPointManager(ship, point);
}

ShipMoveToPointState.prototype.update = function(delta){
	this.moveManager.update(delta);
	this.checkForArrival();
}

ShipMoveToPointState.prototype.checkForArrival = function(){
	if(this.moveManager.hasArrived()){
		this.ship.state = new ShipIdleState(this.ship);
	}
}



ShipOrbitBaseState.prototype = new ShipAIState();
ShipOrbitBaseState.prototype.constructor = ShipOrbitBaseState;

function ShipOrbitBaseState(ship, base){
	ShipAIState.call(this, ship);

	this.ship = ship;
	this.base = base;
	this.orbitManager = new MoveInCirclesManager(this.ship, this.base, this.ship.speed);
}

ShipOrbitBaseState.prototype.update = function(delta){
	this.orbitManager.update(delta);
}



function MoveInCirclesManager(ent, center, speed){
	this.radius = Dist(ent, center);
	this.theta = Math.atan2(center.y - ent.y, center.x - ent.x);
	this.omega = speed / radius;
	this.ent = ent;
	this.center = center;
}

MoveInCirclesManager.prototype.update = function(delta){
	this.theta += this.omega * delta ; 
	this.ent.y = this.centery + Math.sin(this.theta) * this.radius;
	this.ent.x = this.centerx + Math.cos(this.theta) * this.radius;
	this.theta %= (Math.PI * 2);
}


function MoveToPointManager(ent, target){
	this.ent = ent;
	this.target = target;

	this.dx = this.target.x - this.ent.x;
	this.dy = this.target.y - this.ent.y;
	var mag = Dist(0,0, this.dx, this.dy);
	this.dx /= mag;
	this.dy /= mag;
	this.dx *= this.ent.speed;
	this.dy *= this.ent.speed;
}

MoveToPointManager.prototype.update = function(delta){
	if(!this.hasArrived()){
		this.ent.x += this.dx * delta;
		this.ent.y += this.dy * delta;
	}
}

MoveToPointManager.prototype.hasArrived = function(){
	return (Math.abs(this.ent.x - this.target.x) < 1 && Math.abs(this.ent.y - this.target.y) < 1)
}





Ship.prototype.isShip = true;

function Ship(x,y){

	this.defaultColor = {r: 0, g: 255, b:0};
	this.selectedColor = {r: 255, g: 255, b:0};

	this.x = x;
	this.y = y;

	this.width = 20;
	this.height = 20;
	this.renderType = "Rectangle";
	this.color = this.defaultColor;

	this.orbitDist = 60;

	this.speed = 50;

	this.state = new ShipIdleState(this);
}

Ship.prototype.draw = function(ctx){
	this.color = this.defaultColor;
	for(var e in selectRect.selected){
		if(selectRect.selected[e]===this){
			this.color = this.selectedColor;
		}
	}
	RenderObject(this, ctx);
}

Ship.prototype.update = function(delta){
	this.state.update(delta);
}

Ship.prototype.moveTo = function(x,y){
	var targetBase = null;
	var targetObj = {x:x, y:y};

	for(var i = 0; i < ents.length; i++){
		var ent = ents[i];
		if(ent.isBase){
			if(CollisionDetector.RectPointCollide(ent, targetObj)){
				targetBase = ent;
			}
		}
	}

	if(targetBase !== null){
		this.state.onMoveToBaseOrder(base);
	}
	else{
		this.state.onMoveToPointOrder(targetObj);
	}
}


var EntityManager = {
	map: {
		all: [],
	},
	add: function(ent, groups){
		map["all"].push(ent);

	},
	remove: function(ent){

	},
	getGroup: function(group){

	},
	getAll: function(){

	}
}

var ents = [];



// Update game objects
var update = function (modifier) {
	var moveAmt = 10;
	if(keysDown["up"]){
		cameraOffset.y -= moveAmt;
	}
	else if(keysDown["down"]){
		cameraOffset.y += moveAmt;
	} 

	if(keysDown["right"]){
		cameraOffset.x += moveAmt;

	}
	else if(keysDown["left"]){
		cameraOffset.x -= moveAmt;
	} 	


	for(var i = 0; i < ents.length; i++){
		if(ents[i].update(modifier)){
			ents.splice(i, 1);
		}
	}
};

// Draw everything
var render = function () {
	ctx.clearRect(0,0, canvas.width, canvas.height);

	ctx.save();
		ctx.translate(-cameraOffset.x, -cameraOffset.y);
		for(var i = 0; i < ents.length; i++){
			ents[i].draw(ctx, cameraOffset);
		}
	ctx.restore();

	selectRect.draw(ctx);
};


// The main game loop
var main = function () {
	var now = Date.now();
	var delta = now - then;
	delta /= 1000;
	delta = delta.clamp(0, .5);
	update(delta);

	render();

	then = now;
	requestAnimFrame(main, canvas);
};


var init = function(){
	$(function(){
		$("#canvasContainer").append(canvas);

		window.onresize = resize;	

		ents.push(new Base(100,100));
		ents.push(new Base(200,300));
		ents.push(new Base(400,500));
		ents.push(new Ship(ents[0].x + ents[0].width , ents[0].y));
		ents.push(new Ship(ents[0].x - ents[0].width , ents[0].y));

		ents.push(new Ship(ents[0].x, ents[0].y + ents[0].width));
		ents.push(new Ship(ents[0].x, ents[0].y - ents[0].width));

		ents.push(new Ship(ents[1].x, ents[1].y));
		then = Date.now();
		main();
	})
}

function resize()
{
	//ctx.canvas.width  = window.innerWidth; 
	//ctx.canvas.height = window.innerHeight;
}



var then = Date.now();
//AM.downloadAll(init);
init();
// Let's play this game!
